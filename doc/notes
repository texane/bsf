. performance issues using __sync_bool_compare_and_swap
 . a node has a state that must be marked atomically
 . trivially implemented in sequential version
 . CAS instruction used in concurrent version
 . on a 10000 nodes graph with an average degree of 250
  . 86453.200000 versus 186766.280000 usecs
 . same problem with __sync_fetch_and_or
 . tested on idkoiff
 . solution: avoid the use of CAS by reading the value first
  . same experience
  . 85131.820000 versus 83865.340000 usecs

. sequential time versus parallel with 1 thread:
 . 90177.720000 vs 103109.480000 usecs
 . cost does NOT come from fetch_and_or

. temps 200000_100, avec une abortion
sur le thief dans l entrypoint au besoin 
3 445089.140000
3 499256.200000
3 220956.060000
3 194587.520000
3 172092.100000
3 149904.420000
3 129281.740000
3 136460.740000
3 138740.400000
3 126264.780000
3 136548.980000
3 135200.980000
3 137919.140000
3 137806.920000
3 142148.800000
3 136681.200000
3 145896.760000
3 145212.820000
3 139178.900000
3 142788.280000
3 139025.800000
3 144476.320000
3 150132.220000
3 146950.780000
3 147053.580000
3 151430.200000
3 150032.420000
3 161227.920000
3 162555.420000
3 157676.640000



. todo
 . [] par_work -> push_back, push_front
 . [] compactable array
 . [] block list
 . [x] il semble qu une primitive de type abort point soit necessaire
  . sinon on ne peut pas aborter sans preempter
  . todo: implementer a la main: if (thief_res->aborted) return ;